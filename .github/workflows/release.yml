name: Build and Release VSCode Extension

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
    types: [ closed ]
  workflow_dispatch: # Allow manual trigger

jobs:
  check-version:
    runs-on: ubuntu-latest
    outputs:
      should-release: ${{ steps.version-check.outputs.should-release }}
      package-version: ${{ steps.version-check.outputs.package-version }}
      latest-version: ${{ steps.version-check.outputs.latest-version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get package version
        id: package-version
        run: |
          PACKAGE_VERSION=$(node -p "require('./package.json').version")
          echo "version=$PACKAGE_VERSION" >> $GITHUB_OUTPUT
          echo "Package version: $PACKAGE_VERSION"

      - name: Get latest release version
        id: latest-release
        run: |
          LATEST_VERSION=$(curl -s "https://api.github.com/repos/${{ github.repository }}/releases/latest" | jq -r '.tag_name // "v0.0.0"' | sed 's/^v//')
          echo "version=$LATEST_VERSION" >> $GITHUB_OUTPUT
          echo "Latest release version: $LATEST_VERSION"

      - name: Compare versions
        id: version-check
        run: |
          PACKAGE_VERSION="${{ steps.package-version.outputs.version }}"
          LATEST_VERSION="${{ steps.latest-release.outputs.version }}"
          
          echo "package-version=$PACKAGE_VERSION" >> $GITHUB_OUTPUT
          echo "latest-version=$LATEST_VERSION" >> $GITHUB_OUTPUT
          
          if [ "$PACKAGE_VERSION" != "$LATEST_VERSION" ]; then
            echo "should-release=true" >> $GITHUB_OUTPUT
            echo "‚úÖ Version changed: $LATEST_VERSION ‚Üí $PACKAGE_VERSION"
            echo "Will proceed with build and release"
          else
            echo "should-release=false" >> $GITHUB_OUTPUT
            echo "‚è≠Ô∏è Version unchanged: $PACKAGE_VERSION"
            echo "Skipping build and release"
          fi

  build-and-release:
    needs: check-version
    if: needs.check-version.outputs.should-release == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install VSCE
        run: npm install -g @vscode/vsce

      - name: Lint code
        run: npm run lint

      - name: Compile TypeScript
        run: npm run compile

      - name: Package extension
        run: |
          vsce package
          echo "VSIX_FILENAME=$(ls *.vsix)" >> $GITHUB_ENV

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ needs.check-version.outputs.package-version }}
          release_name: Release v${{ needs.check-version.outputs.package-version }}
          body: |
            ## VSCode Zotero Extension v${{ needs.check-version.outputs.package-version }}
            
            ### Changes
            - Version bump from v${{ needs.check-version.outputs.latest-version }} to v${{ needs.check-version.outputs.package-version }}
            
            ### Installation
            Download the `.vsix` file and install it in VSCode using:
            ```
            code --install-extension ${{ env.VSIX_FILENAME }}
            ```
            
            Or install via VSCode UI: Extensions ‚Üí Install from VSIX...
          draft: false
          prerelease: false

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./${{ env.VSIX_FILENAME }}
          asset_name: ${{ env.VSIX_FILENAME }}
          asset_content_type: application/zip

  notify-skip:
    needs: check-version
    if: needs.check-version.outputs.should-release == 'false'
    runs-on: ubuntu-latest
    steps:
      - name: Skip notification
        run: |
          echo "üîÑ Workflow completed - no release needed"
          echo "üì¶ Current version: ${{ needs.check-version.outputs.package-version }}"
          echo "üè∑Ô∏è Latest release: ${{ needs.check-version.outputs.latest-version }}"
          echo "üí° To trigger a release, update the version in package.json"