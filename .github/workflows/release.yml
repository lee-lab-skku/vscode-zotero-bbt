name: Build and Release VSCode Extension

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
    types: [ closed ]
  workflow_dispatch: # Allow manual trigger

permissions:
  contents: write
  issues: read
  pull-requests: read

jobs:
  check-version:
    runs-on: ubuntu-latest
    outputs:
      should-release: ${{ steps.version-check.outputs.should-release }}
      package-version: ${{ steps.version-check.outputs.package-version }}
      latest-version: ${{ steps.version-check.outputs.latest-version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get package version
        id: package-version
        run: |
          PACKAGE_VERSION=$(node -p "require('./package.json').version")
          echo "version=$PACKAGE_VERSION" >> $GITHUB_OUTPUT
          echo "Package version: $PACKAGE_VERSION"

      - name: Get latest release version
        id: latest-release
        run: |
          LATEST_VERSION=$(curl -s "https://api.github.com/repos/${{ github.repository }}/releases/latest" | jq -r '.tag_name // "v0.0.0"' | sed 's/^v//')
          echo "version=$LATEST_VERSION" >> $GITHUB_OUTPUT
          echo "Latest release version: $LATEST_VERSION"

      - name: Compare versions
        id: version-check
        run: |
          PACKAGE_VERSION="${{ steps.package-version.outputs.version }}"
          LATEST_VERSION="${{ steps.latest-release.outputs.version }}"
          
          echo "package-version=$PACKAGE_VERSION" >> $GITHUB_OUTPUT
          echo "latest-version=$LATEST_VERSION" >> $GITHUB_OUTPUT
          
          if [ "$PACKAGE_VERSION" != "$LATEST_VERSION" ]; then
            echo "should-release=true" >> $GITHUB_OUTPUT
            echo "‚úÖ Version changed: $LATEST_VERSION ‚Üí $PACKAGE_VERSION"
            echo "Will proceed with build and release"
          else
            echo "should-release=false" >> $GITHUB_OUTPUT
            echo "‚è≠Ô∏è Version unchanged: $PACKAGE_VERSION"
            echo "Skipping build and release"
          fi

  build-and-release:
    needs: check-version
    if: needs.check-version.outputs.should-release == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install VSCE
        run: |
          # Install latest version with better Node.js compatibility
          npm install -g @vscode/vsce@latest
          # Verify installation
          vsce --version

      - name: Lint code
        run: npm run lint

      - name: Compile TypeScript
        run: npm run compile

      - name: Package extension
        run: |
          # Get version and name from package.json for proper filename
          VERSION=$(node -p "require('./package.json').version")
          NAME=$(node -p "require('./package.json').name")
          VSIX_NAME="${NAME}-${VERSION}.vsix"
          
          echo "üì¶ Creating VSIX: $VSIX_NAME"
          echo "üîç Repository info: ${{ github.repository }}"
          echo "üè∑Ô∏è Version: $VERSION"
          
          # Package extension with version-aware filename
          vsce package --out "$VSIX_NAME" || {
            echo "‚ùå Failed with vsce package, trying alternative approach..."
            npx @vscode/vsce@latest package --out "$VSIX_NAME"
          }
          
          # Verify the file was created
          ls -la "$VSIX_NAME"

      - name: Create Release
        id: release
        uses: softprops/action-gh-release@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ needs.check-version.outputs.package-version }}
          name: Release v${{ needs.check-version.outputs.package-version }}
          body: |
            ## VSCode Zotero Extension v${{ needs.check-version.outputs.package-version }}
            
            ### Changes
            - Version bump from v${{ needs.check-version.outputs.latest-version }} to v${{ needs.check-version.outputs.package-version }}
            
            ### Installation
            Download the `.vsix` file and install it in VSCode using:
            ```
            code --install-extension vscode-zotero-${{ needs.check-version.outputs.package-version }}.vsix
            ```
            
            Or install via VSCode UI: Extensions ‚Üí Install from VSIX...
            
            ### What's New
            Check the [CHANGELOG.md](CHANGELOG.md) for detailed changes.
          files: |
            *.vsix
          draft: false
          prerelease: false

  notify-skip:
    needs: check-version
    if: needs.check-version.outputs.should-release == 'false'
    runs-on: ubuntu-latest
    steps:
      - name: Skip notification
        run: |
          echo "üîÑ Workflow completed - no release needed"
          echo "üì¶ Current version: ${{ needs.check-version.outputs.package-version }}"
          echo "üè∑Ô∏è Latest release: ${{ needs.check-version.outputs.latest-version }}"
          echo "üí° To trigger a release, update the version in package.json"